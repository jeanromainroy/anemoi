// CT Current Sensor
#include "EmonLib.h"
EnergyMonitor emon1;                   // Create an instance
double calib = 0.43979;
unsigned char ctPin = 0; // Sensor Input

// Water Flow Sensor
unsigned char flowPin = 2; // Sensor Input
volatile int flowCount; // Measures flow sensor pulses
float flowRate; // Calculated litres/hour
unsigned long currentTime;
unsigned long cloopTime;

// Temp Sensor
#include <OneWire.h> 
#include <DallasTemperature.h>
#define ONE_WIRE_BUS 3 

// Setup a oneWire instance to communicate with any OneWire devices 
OneWire oneWire(ONE_WIRE_BUS); 

// Pass our oneWire reference to Dallas Temperature. 
DallasTemperature sensors(&oneWire);

// Water Flow Interrupt function
void flowInterrupt (){
	flowCount++;
}

void setup(){

	// Pin Setup
	pinMode(flowPin, INPUT);
	digitalWrite(flowPin, HIGH); // Optional Internal Pull-Up

	emon1.current(ctPin, 111.1); // Current: input pin, calibration.

	// Serial Port
	Serial.begin(9600);

	// Interrupt
	attachInterrupt(0, flowInterrupt, RISING); // Setup Interrupt
	sei(); // Enable interrupts

	// Time
	currentTime = millis();
	cloopTime = currentTime;

	// Temp Library
	sensors.begin(); 
}

void waterFlow(){

	// Computer flow rate in L/min.
	flowRate = flowCount * 60 * 2.25 / 1000;
	flowRate = (flowRate*flowRate)*0.2341 + flowRate*0.5398;

	// Reset Counter
	flowCount = 0; 

	Serial.print("Flow Rate (L/hour) : ");
	Serial.println(flowRate, 2); // Print litres/hour
}

void ctCurrent(){

	// Calculate Irms only
	double Irms = emon1.calcIrms(42);  

	Serial.print("Power (W) : ");
	Serial.println(calib*Irms*110, 2);  
}

void tempSensor(){
	sensors.requestTemperatures(); // Send the command to get temperature readings 

	Serial.print("Temperature (C) : "); 
	Serial.println(sensors.getTempCByIndex(0)); // Why "byIndex"?
}

void loop (){

	// Store current time
	currentTime = millis();

	// Every second, print results
	if(currentTime >= (cloopTime + 1000)){
		
		// Updates cloopTime
		cloopTime = currentTime; 
		
		waterFlow();
		ctCurrent();
		tempSensor(); 
	}   
}